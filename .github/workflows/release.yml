name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-console:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: console/package-lock.json

      - name: Build console
        working-directory: console
        run: |
          npm ci
          npm run build

      - name: Upload console artifact
        uses: actions/upload-artifact@v4
        with:
          name: console-dist
          path: console/dist/
          retention-days: 1

  build-binaries:
    name: Build ${{ matrix.platform }}
    needs: build-console
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x86_64
            target: x86_64-unknown-linux-gnu
            use_cross: false
          - os: ubuntu-latest
            platform: linux-arm64
            target: aarch64-unknown-linux-gnu
            use_cross: true
          - os: macos-13
            platform: macos-x86_64
            target: x86_64-apple-darwin
            use_cross: false
          - os: macos-latest
            platform: macos-arm64
            target: aarch64-apple-darwin
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download console artifact
        uses: actions/download-artifact@v4
        with:
          name: console-dist
          path: console/dist/

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.88.0"
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tool
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: service

      - name: Build binary (native)
        if: ${{ !matrix.use_cross }}
        working-directory: service
        run: cargo build --release --target ${{ matrix.target }} --bin lambda-at-home-server

      - name: Build binary (cross-compile)
        if: matrix.use_cross
        working-directory: service
        run: cross build --release --target ${{ matrix.target }} --bin lambda-at-home-server

      - name: Create release asset
        run: |
          mkdir -p dist
          binary_path="target/${{ matrix.target }}/release/lambda-at-home-server"
          
          if [ ! -f "$binary_path" ]; then
            echo "Error: Binary not found at $binary_path"
            echo "Listing target directory:"
            ls -la target/${{ matrix.target }}/release/ || ls -la target/
            exit 1
          fi
          
          asset_name="lambda-at-home-server-${{ github.ref_name }}-${{ matrix.platform }}"
          cp "$binary_path" "dist/$asset_name"
          chmod +x "dist/$asset_name"
          
          cd dist
          if command -v sha256sum &> /dev/null; then
            sha256sum "$asset_name" > "$asset_name.sha256"
          else
            shasum -a 256 "$asset_name" > "$asset_name.sha256"
          fi
          echo "Created: $asset_name"
          cat "$asset_name.sha256"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform }}
          path: dist/*
          retention-days: 1

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          echo "Collecting binaries..."
          find artifacts/binary-* -type f -exec cp {} release-assets/ \;
          
          echo "Copying install scripts..."
          cp install-lambda-at-home.sh release-assets/ || echo "install-lambda-at-home.sh not found"
          cp setup.sh release-assets/ || echo "setup.sh not found"
          cp INSTALL.md release-assets/ || echo "INSTALL.md not found"
          
          echo "Release assets:"
          ls -lah release-assets/

      - name: Generate release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Lambda@Home ${{ github.ref_name }}
          
          ### Features
          - Function deletion with graceful in-flight execution handling
          - WebSocket Runtime API support
          - Node.js 24 runtime support
          - Enhanced testing and quality improvements
          
          ### Quick Install
          
          ```bash
          curl -fsSL https://raw.githubusercontent.com/fearlessfara/lambda-at-home/main/install-lambda-at-home.sh | bash
          ```
          
          ### Manual Installation
          
          Download the appropriate binary for your platform from the assets below, make it executable, and move it to your PATH:
          
          **Linux x86_64:**
          ```bash
          wget https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-linux-x86_64
          chmod +x lambda-at-home-server-${{ github.ref_name }}-linux-x86_64
          sudo mv lambda-at-home-server-${{ github.ref_name }}-linux-x86_64 /usr/local/bin/lambda-at-home-server
          ```
          
          **Linux ARM64:**
          ```bash
          wget https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-linux-arm64
          chmod +x lambda-at-home-server-${{ github.ref_name }}-linux-arm64
          sudo mv lambda-at-home-server-${{ github.ref_name }}-linux-arm64 /usr/local/bin/lambda-at-home-server
          ```
          
          **macOS x86_64 (Intel):**
          ```bash
          curl -L -o lambda-at-home-server https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-macos-x86_64
          chmod +x lambda-at-home-server
          sudo mv lambda-at-home-server /usr/local/bin/
          ```
          
          **macOS ARM64 (Apple Silicon):**
          ```bash
          curl -L -o lambda-at-home-server https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-macos-arm64
          chmod +x lambda-at-home-server
          sudo mv lambda-at-home-server /usr/local/bin/
          ```
          
          ### Checksums
          
          SHA-256 checksums are provided as separate `.sha256` files for each binary.
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body_path: release-notes.md
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
