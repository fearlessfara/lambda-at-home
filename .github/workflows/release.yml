name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-console:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: console/node_modules
          key: npm-${{ hashFiles('console/package-lock.json') }}
          restore-keys: npm-

      - name: Build Console (shared across all platforms)
        working-directory: console
        run: |
          npm ci
          npm run build

      - name: Upload console build
        uses: actions/upload-artifact@v4
        with:
          name: console-build
          path: console/dist/
          retention-days: 1

  build:
    needs: build-console
    runs-on: ${{ matrix.os }}
    env:
      RUSTUP_TOOLCHAIN: 1.88.0
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            platform: linux-x86_64
          - os: macos-latest
            arch: x86_64
            platform: macos-x86_64
          - os: macos-latest
            arch: arm64
            platform: macos-arm64
          - os: windows-latest
            arch: x86_64
            platform: windows-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download console build
        uses: actions/download-artifact@v4
        with:
          name: console-build
          path: console/dist/

      - name: Install Rust (stable, pin to local)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.88.0
          components: rustfmt

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            service/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cd service && cargo build --release --bin lambda-at-home-server

      - name: Package binary
        shell: bash
        run: |
          mkdir -p release-assets
          
          # Determine binary name and final filename based on OS
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            binary_name="lambda-at-home-server.exe"
            final_name="lambda-at-home-server-${{ github.ref_name }}-${{ matrix.platform }}.exe"
          else
            binary_name="lambda-at-home-server"
            final_name="lambda-at-home-server-${{ github.ref_name }}-${{ matrix.platform }}"
          fi
          
          # Copy binary with platform-specific naming
          cp "service/target/release/${binary_name}" "release-assets/${final_name}"
          
          # Make executable (Unix only)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x "release-assets/${final_name}"
          fi
          
          echo "‚úÖ Packaged ${{ runner.os }} ${{ matrix.arch }} binary: ${final_name}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ runner.os }}-${{ matrix.arch }}
          path: release-assets/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          echo "üîç Debugging artifact structure:"
          find artifacts/ -type f -name "*" | head -20
          echo "---"
          
          # Copy all binaries from artifacts
          echo "üì¶ Copying binaries from artifacts..."
          find artifacts/ -name "lambda-at-home-server-*" -exec cp {} release-assets/ \;
          
          # Copy install scripts and documentation
          echo "üìÑ Copying documentation and scripts..."
          cp install-lambda-at-home.sh release-assets/
          cp setup.sh release-assets/
          cp INSTALL.md release-assets/
          
          # Create checksums for binaries
          echo "üîê Creating checksums..."
          cd release-assets
          for file in lambda-at-home-server-*; do
            if [[ -f "$file" ]]; then
              sha256sum "$file" > "${file}.sha256"
              echo "‚úÖ Created checksum for $file"
            fi
          done
          
          echo "üì¶ Final release assets:"
          ls -la
          echo "---"
          echo "üìä Asset count: $(ls -1 | wc -l) files"
          
          # Verify we have all expected binaries
          echo "üîç Verifying expected binaries..."
          expected_binaries=(
            "lambda-at-home-server-${{ github.ref_name }}-linux-x86_64"
            "lambda-at-home-server-${{ github.ref_name }}-macos-x86_64"
            "lambda-at-home-server-${{ github.ref_name }}-macos-arm64"
            "lambda-at-home-server-${{ github.ref_name }}-windows-x86_64.exe"
          )
          
          missing_binaries=()
          for binary in "${expected_binaries[@]}"; do
            if [[ ! -f "$binary" ]]; then
              missing_binaries+=("$binary")
            else
              echo "‚úÖ Found: $binary"
            fi
          done
          
          if [[ ${#missing_binaries[@]} -gt 0 ]]; then
            echo "‚ùå Missing binaries:"
            printf '%s\n' "${missing_binaries[@]}"
            echo "Available files:"
            ls -la lambda-at-home-server-*
            exit 1
          else
            echo "‚úÖ All expected binaries found!"
          fi

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Lambda@Home ${{ github.ref_name }}
          body: |
            ## Lambda@Home ${{ github.ref_name }}
            
            ### Quick Installation
            
            Download and install the binary for your platform:
            
            ```bash
            curl -fsSL https://raw.githubusercontent.com/fearlessfara/lambda-at-home/main/install-lambda-at-home.sh | bash
            ```
            
            ### Manual Installation
            
            Download the appropriate binary for your platform:
            
            **Linux x86_64:**
            ```bash
            wget https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-linux-x86_64
            chmod +x lambda-at-home-server-${{ github.ref_name }}-linux-x86_64
            sudo mv lambda-at-home-server-${{ github.ref_name }}-linux-x86_64 /usr/local/bin/lambda-at-home-server
            ```
            
            **macOS x86_64 (Intel):**
            ```bash
            curl -L -o lambda-at-home-server https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-macos-x86_64
            chmod +x lambda-at-home-server
            sudo mv lambda-at-home-server /usr/local/bin/
            ```
            
            **macOS ARM64 (Apple Silicon):**
            ```bash
            curl -L -o lambda-at-home-server https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-macos-arm64
            chmod +x lambda-at-home-server
            sudo mv lambda-at-home-server /usr/local/bin/
            ```
            
            **Windows x86_64:**
            ```powershell
            Invoke-WebRequest -Uri "https://github.com/fearlessfara/lambda-at-home/releases/download/${{ github.ref_name }}/lambda-at-home-server-${{ github.ref_name }}-windows-x86_64.exe" -OutFile "lambda-at-home-server.exe"
            ```
            
            ### Available Binaries
            
            This release includes the following binaries:
            
            - `lambda-at-home-server-${{ github.ref_name }}-linux-x86_64` - Linux x86_64
            - `lambda-at-home-server-${{ github.ref_name }}-macos-x86_64` - macOS Intel
            - `lambda-at-home-server-${{ github.ref_name }}-macos-arm64` - macOS Apple Silicon
            - `lambda-at-home-server-${{ github.ref_name }}-windows-x86_64.exe` - Windows x86_64
            
            Each binary includes a corresponding `.sha256` checksum file for verification.
            
            ### Features
            
            - üê≥ Docker-backed AWS Lambda clone
            - üåê Embedded web console (no separate setup needed)
            - üöÄ Multi-runtime support (Node.js, Python, Rust)
            - ‚ö° Warm container pool with auto-scaling
            - üîå AWS Lambda-compatible APIs
            - üìä Prometheus metrics and structured logging
            
            ### Usage
            
            ```bash
            # Start the server
            lambda-at-home-server
            
            # Access the web console
            open http://localhost:9000
            
            # API endpoints
            curl http://localhost:9000/api/healthz
            ```
            
            ### Documentation
            
            See [INSTALL.md](INSTALL.md) for detailed installation instructions.
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}