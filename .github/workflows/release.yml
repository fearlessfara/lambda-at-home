name: Release

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      RUSTUP_TOOLCHAIN: 1.88.0
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: console/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('console/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Install Rust (stable, pin to local)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.88.0
          components: rustfmt

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build Console (embedded in binary)
        working-directory: console
        run: |
          npm ci
          npm run build

      - name: Build release binary
        run: cargo build --release --bin lambda-at-home-server

      - name: Package artifact (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          OS=${{ runner.os }}
          ARCH=${{ runner.arch }}
          VERSION=${{ github.event.release.tag_name }}
          # Use tag as-is (e.g., v1.2.3)
          # Normalize OS to conventional slug
          case "$OS" in
            Linux) OS_SLUG=linux ;;
            macOS) OS_SLUG=darwin ;;
            *) OS_SLUG=$(echo "$OS" | tr '[:upper:]' '[:lower:]') ;;
          esac
          # Normalize ARCH to conventional slug
          case "$ARCH" in
            X64) ARCH_SLUG=x86_64 ;;
            ARM64) ARCH_SLUG=aarch64 ;;
            *) ARCH_SLUG=$(echo "$ARCH" | tr '[:upper:]' '[:lower:]') ;;
          esac
          BIN=target/release/lambda-at-home-server
          OUT=lambda-at-home-server-${VERSION}-${OS_SLUG}-${ARCH_SLUG}
          mkdir -p dist
          cp "$BIN" "dist/${OUT}"

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          ARCH: ${{ runner.arch }}
        run: |
          $OS = "windows"
          $VERSION = "${{ github.event.release.tag_name }}"
          $BIN = "target/release/lambda-at-home-server.exe"
          switch ($env:ARCH) {
            'X64'   { $archSlug = 'x86_64' }
            'ARM64' { $archSlug = 'aarch64' }
            default { $archSlug = $env:ARCH.ToLower() }
          }
          $OUT = "lambda-at-home-server-$VERSION-$OS-$archSlug.exe"
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item $BIN (Join-Path dist $OUT)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-at-home-server-${{ runner.os }}-${{ runner.arch }}
          path: dist/
          retention-days: 30

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "lambda-at-home-server-*" -type f -exec cp {} release-assets/ \;
          # Copy install scripts
          cp install-lambda-at-home.sh release-assets/
          cp setup.sh release-assets/
          cp INSTALL.md release-assets/
          # Create checksums for binaries
          cd release-assets
          for file in lambda-at-home-server-*; do
            if [[ -f "$file" ]]; then
              sha256sum "$file" > "${file}.sha256"
            fi
          done
          ls -la

      - name: Upload assets to existing Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
