name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-console:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: console/node_modules
          key: npm-${{ hashFiles('console/package-lock.json') }}
          restore-keys: npm-

      - name: Build Console (shared across all platforms)
        working-directory: console
        run: |
          npm ci
          npm run build

      - name: Upload console build
        uses: actions/upload-artifact@v4
        with:
          name: console-build
          path: console/dist/
          retention-days: 1

  build:
    needs: build-console
    runs-on: ${{ matrix.os }}
    env:
      RUSTUP_TOOLCHAIN: 1.88.0
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            platform: linux-x86_64
          - os: ubuntu-latest
            arch: arm64
            platform: linux-arm64
          - os: macos-latest
            arch: x86_64
            platform: macos-x86_64
          - os: macos-latest
            arch: arm64
            platform: macos-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download console build
        uses: actions/download-artifact@v4
        with:
          name: console-build
          path: console/dist/

      - name: Install Rust (stable, pin to local)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.88.0
          components: rustfmt

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            service/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cd service && cargo build --release --bin lambda-at-home-server

      - name: Package binary
        shell: bash
        run: |
          mkdir -p release-assets
          
          # Determine binary name and final filename based on OS
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            binary_name="lambda-at-home-server.exe"
            final_name="lambda-at-home-server-${{ github.ref_name }}-${{ matrix.platform }}.exe"
          else
            binary_name="lambda-at-home-server"
            final_name="lambda-at-home-server-${{ github.ref_name }}-${{ matrix.platform }}"
          fi
          
          # Check if binary exists (workspace root target directory)
          binary_path="target/release/${binary_name}"
          if [[ ! -f "$binary_path" ]]; then
            echo "❌ Binary not found at: $binary_path"
            echo "📁 Contents of target/release/:"
            ls -la target/release/ || echo "Directory does not exist"
            exit 1
          fi
          
          # Copy binary with platform-specific naming
          cp "$binary_path" "release-assets/${final_name}"
          
          # Make executable (Unix only)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x "release-assets/${final_name}"
          fi
          
          echo "✅ Packaged ${{ runner.os }} ${{ matrix.arch }} binary: ${final_name}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ runner.os }}-${{ matrix.arch }}
          path: release-assets/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          echo "🔍 Debugging artifact structure:"
          find artifacts/ -type f -name "*" | head -20
          echo "---"
          
          # Copy all binaries from artifacts
          echo "📦 Copying binaries from artifacts..."
          find artifacts/ -name "lambda-at-home-server-*" -exec cp {} release-assets/ \;
          
          # Copy install scripts and documentation
          echo "📄 Copying documentation and scripts..."
          cp install-lambda-at-home.sh release-assets/
          cp setup.sh release-assets/
          cp INSTALL.md release-assets/
          
          # Create checksums for binaries
          echo "🔐 Creating checksums..."
          cd release-assets
          for file in lambda-at-home-server-*; do
            if [[ -f "$file" ]]; then
              sha256sum "$file" > "${file}.sha256"
              echo "✅ Created checksum for $file"
            fi
          done
          
          echo "📦 Final release assets:"
          ls -la
          echo "---"
          echo "📊 Asset count: $(ls -1 | wc -l) files"
          
          # Verify we have all expected binaries
          echo "🔍 Verifying expected binaries..."
          expected_binaries=(
            "lambda-at-home-server-${{ github.ref_name }}-linux-x86_64"
            "lambda-at-home-server-${{ github.ref_name }}-linux-arm64"
            "lambda-at-home-server-${{ github.ref_name }}-macos-x86_64"
            "lambda-at-home-server-${{ github.ref_name }}-macos-arm64"
          )
          
          missing_binaries=()
          for binary in "${expected_binaries[@]}"; do
            if [[ ! -f "$binary" ]]; then
              missing_binaries+=("$binary")
            else
              echo "✅ Found: $binary"
            fi
          done
          
          if [[ ${#missing_binaries[@]} -gt 0 ]]; then
            echo "❌ Missing binaries:"
            printf '%s\n' "${missing_binaries[@]}"
            echo "Available files:"
            ls -la lambda-at-home-server-*
            exit 1
          else
            echo "✅ All expected binaries found!"
          fi

          # Generate minimal release notes with inline checksums
          TAG="${{ github.ref_name }}"
          cat > RELEASE_BODY.md << EOF
          ## Lambda@Home ${TAG}

### Quick Install

```bash
curl -fsSL https://raw.githubusercontent.com/fearlessfara/lambda-at-home/main/install-lambda-at-home.sh | bash
```

### Manual Installation

Linux x86_64:
```bash
wget https://github.com/fearlessfara/lambda-at-home/releases/download/${TAG}/lambda-at-home-server-${TAG}-linux-x86_64
chmod +x lambda-at-home-server-${TAG}-linux-x86_64
sudo mv lambda-at-home-server-${TAG}-linux-x86_64 /usr/local/bin/lambda-at-home-server
```

Linux ARM64:
```bash
wget https://github.com/fearlessfara/lambda-at-home/releases/download/${TAG}/lambda-at-home-server-${TAG}-linux-arm64
chmod +x lambda-at-home-server-${TAG}-linux-arm64
sudo mv lambda-at-home-server-${TAG}-linux-arm64 /usr/local/bin/lambda-at-home-server
```

macOS x86_64 (Intel):
```bash
curl -L -o lambda-at-home-server https://github.com/fearlessfara/lambda-at-home/releases/download/${TAG}/lambda-at-home-server-${TAG}-macos-x86_64
chmod +x lambda-at-home-server
sudo mv lambda-at-home-server /usr/local/bin/
```

macOS ARM64 (Apple Silicon):
```bash
curl -L -o lambda-at-home-server https://github.com/fearlessfara/lambda-at-home/releases/download/${TAG}/lambda-at-home-server-${TAG}-macos-arm64
chmod +x lambda-at-home-server
sudo mv lambda-at-home-server /usr/local/bin/
```

          ### Binaries + SHA-256
EOF

          # Append checksums inline for each binary
          {
            for f in lambda-at-home-server-*; do
              [[ -f "$f" ]] || continue
              sha_file="${f}.sha256"
              if [[ -f "$sha_file" ]]; then
                sha=$(sed 's/ .*//' "$sha_file")
                printf -- "- %s (SHA-256: %s)\n" "$f" "$sha"
              fi
            done
          } >> RELEASE_BODY.md
          mv RELEASE_BODY.md release-assets/

      - name: Check if release exists
        id: check-release
        run: |
          if gh release view ${{ github.ref_name }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ github.ref_name }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ github.ref_name }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Lambda@Home ${{ github.ref_name }}
          generate_release_notes: false
          body_path: release-assets/RELEASE_BODY.md
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
