name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-console:
    name: Build Console
    runs-on: ubuntu-latest
    outputs:
      console-built: ${{ steps.build.outputs.built }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: console/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('console/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Build Console
        id: build
        working-directory: console
        run: |
          npm ci
          npm run build
          echo "built=true" >> $GITHUB_OUTPUT

      - name: Upload Console Assets
        uses: actions/upload-artifact@v4
        with:
          name: console-assets
          path: console/dist/
          retention-days: 1

  format-and-lint:
    name: Format and Lint
    runs-on: ubuntu-latest
    needs: build-console
    env:
      RUSTUP_TOOLCHAIN: 1.88.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Console Assets
        uses: actions/download-artifact@v4
        with:
          name: console-assets
          path: console/dist/

      - name: Install Rust (stable, pin to local)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.88.0
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            service/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cd service && cargo fmt --all -- --check

      - name: Clippy (workspace)
        run: cd service && cargo clippy --workspace --all-targets --all-features -- -D warnings

  rust-and-ui:
    name: Build UI and Rust
    runs-on: ubuntu-latest
    needs: [build-console, format-and-lint]
    env:
      RUSTUP_TOOLCHAIN: 1.88.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Console Assets
        uses: actions/download-artifact@v4
        with:
          name: console-assets
          path: console/dist/

      - name: Install Rust (stable, pin to local)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.88.0
          components: rustfmt

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            service/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build (workspace)
        run: |
          rustc -V
          cargo -V
          cd service && cargo build --workspace --all-targets

      - name: Unit tests (workspace libs)
        run: cd service && cargo test --workspace --lib

      - name: Integration tests (with Docker)
        run: |
          # Check if Docker is available
          if docker --version > /dev/null 2>&1; then
            echo "🐳 Docker is available, running integration tests..."
            cd service && cargo test --features docker_tests -- --ignored
          else
            echo "⚠️  Docker not available, skipping integration tests"
          fi
        continue-on-error: true

      - name: Test execution tracker module
        run: cd service && cargo test --package lambda-control --lib

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: console/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('console/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Cache e2e npm
        uses: actions/cache@v4
        with:
          path: e2e/node_modules
          key: ${{ runner.os }}-e2e-npm-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: ${{ runner.os }}-e2e-npm-

      - name: Install e2e dependencies
        working-directory: e2e
        run: npm ci

      - name: Run e2e tests
        run: |
          set -e
          # Build the server first
          echo "🔨 Building server binary..."
          cd service
          cargo build --bin lambda-at-home-server
          
          # Create data directory and database file
          echo "📁 Creating data directory and database file..."
          mkdir -p data
          touch data/lhome.db
          
          # Start the server in the background
          echo "🚀 Starting server..."
          cargo run --bin lambda-at-home-server &
          SERVER_PID=$!
          
          # Function to cleanup server
          cleanup() {
            echo "🧹 Cleaning up server..."
            kill $SERVER_PID 2>/dev/null || true
            wait $SERVER_PID 2>/dev/null || true
          }
          
          # Set trap to cleanup on exit
          trap cleanup EXIT
          
          # Wait for server to start and verify it's running
          echo "⏳ Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:9000/healthz > /dev/null 2>&1; then
              echo "✅ Server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 30 seconds"
              exit 1
            fi
            sleep 1
          done
          
          # Run e2e tests
          echo "🧪 Running e2e tests..."
          cd .. && cd e2e && npm test
